<?php

namespace Tests\Feature;

use App\Http\Resources\UserResource;
use App\Models\User;
use App\Token;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Testing\Fluent\AssertableJson;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class AuthTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Artisan::call("migrate:fresh");
    }

    /**
     *
     * /register
     * @return void
     */
    public function test_if_we_can_register()
    {
        $user = User::factory()->makeOne();
        $this->json('POST', 'api/register', $user->getAttributes(), ['Accept' => 'application/json'])
            ->assertStatus(201);
        $this->assertDatabaseHas("users", [
            "email" => $user->email
        ]);
    }

    /**
     *
     * /register
     * @return void
     * @depends test_if_we_can_register
     */
    public function test_if_we_cant_register_with_same_login()
    {
        $user = User::factory()->makeOne()->getAttributes();

        $this->json('POST', 'api/register', $user, ['Accept' => 'application/json'])
            ->assertStatus(201);
        $second = User::factory()->makeOne(["login" => $user["login"]])->getAttributes();

        $this->json('POST', 'api/register', $user, ['Accept' => 'application/json'])
            ->assertStatus(400);
    }

    /**
     *
     * /register
     * @return void
     * @depends test_if_we_can_register
     */
    public function test_if_we_cant_register_with_same_email()
    {
        $user = User::factory()->makeOne()->getAttributes();

        $this->json('POST', 'api/register', $user, ['Accept' => 'application/json'])
            ->assertStatus(201);
        $second = User::factory()->makeOne(["email" => $user["email"]])->getAttributes();
        $this->json('POST', 'api/register', $second, ['Accept' => 'application/json'])
            ->assertStatus(400);
    }

    /**
     *
     * /register
     * @return void
     *
     */
    public function test_if_we_cant_register_with_one_missed_field()
    {
        $user = User::factory()->makeOne()->getAttributes();
        unset($user["password"]);

        $this->json('POST', 'api/register', $user, ['Accept' => 'application/json'])
            ->assertStatus(400);

    }

    /**
     *
     * /register
     * @return void
     *
     */
    public function test_if_we_cant_register_with_many_missed_fields()
    {
        $user = User::factory()->makeOne()->getAttributes();
        unset($user["password"]);
        unset($user["login"]);


        $this->json('POST', 'api/register', $user, ['Accept' => 'application/json'])
            ->assertStatus(400);
    }

    /**
     * /auth
     * @depends test_if_we_can_register
     * @return void
     */
    public function test_if_we_can_auth_with_one_registered_user()
    {
        $user = User::factory()->makeOne();
        $this->json('POST', 'api/register', $user->getAttributes(), ['Accept' => 'application/json'])
            ->assertStatus(201);
        $this->json('POST', 'api/auth',
            [
                "login" => $user["login"],
                "password" => $user["password"]

            ])
            ->assertStatus(200)
            ->assertJsonStructure(Token::STRUCTURE);
    }

    /**
     * /auth
     * @depends test_if_we_can_register
     * @return void
     */
    public function test_if_we_cant_auth_with_incorrect_credentials()
    {
        $user = User::factory()->makeOne();
        $this->json('POST', 'api/register', $user->getAttributes(), ['Accept' => 'application/json'])
            ->assertStatus(201);
        $this->json('POST', 'api/auth', [
            "login" => $user["login"],
            "password" => "b" . $user["password"] . "a"

        ])->assertStatus(400);
    }

    /**
     * /users
     * @depends test_if_we_can_auth_with_one_registered_user
     * @return void
     */
    public function test_if_we_cant_get_users_when_normal_user()
    {
        $one = User::factory()->createOne();
        $two = User::factory()->createOne();
        Sanctum::actingAs($one);

        $this->json("GET", "api/users")
            ->assertStatus(400);
    }

    /**
     * /users
     * @depends test_if_we_can_auth_with_one_registered_user
     * @return void
     */
    public function test_if_we_can_get_users_when_admin()
    {
        $one = User::factory()->createOne();
        $two = User::factory()->createOne();
        Sanctum::actingAs($one, Token::ADMIN_ABILITIES);

        $resp = $this->json("GET", "api/users");
        $resp->assertStatus(200);
        $resp->assertJson(function (AssertableJson $json) use ($two, $one) {
            $json
                ->has('data', 2)
                ->has('data.0', function ($json) use ($one) {
                    return $json->where('id', $one->id)
                        ->where('username', $one->login)
                        ->where('firstname', $one->firstname)
                        ->where('name', $one->name)
                        ->where('age', $one->age);

                })
                ->has('data.1', function ($json) use ($two) {
                    return $json->where('id', $two->id)
                        ->where('username', $two->login)
                        ->where('firstname', $two->firstname)
                        ->where('name', $two->name)
                        ->where('age', $two->age);

                });
        });


    }


}
